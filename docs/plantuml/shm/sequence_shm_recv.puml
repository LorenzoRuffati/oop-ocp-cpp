'https://www.planttext.com/?text=TLPjRziu3FxkNy7bo-qjmFerADhrKWmu81sAf8V3i0w1OjEsK5lA93cjjzv_FrAovPVsWYAeHL8ad-SXdS_M2UEQke9TMUyDfgVapT68eXRWKFy2PnfCaiH9Lo4iTgKmc46DjJOja3VA4neuO2bEKZTcaIH7kawcyYYK-p__1GWBkss2YgvjoGjhSIorGKYrDbamtwolauD-WiMQpwGIJce5bkf9tIA6Rb5aL42g6qft4k7gxVLmTwNJ1xiNgQF4thYvcjagfDfL4OoRLuiwjdrDjsJFWEgAVckomg79S-_27abXT7E4rA1mc03uvFGljqnFbPlt53Db6gtwmm4-IKjD0drsMrXUU3JW_ViLhFsbGmZvK47q_VjHIBS_OB4_-tSKj08-9_lpypDzSmVdonyh-CT8HxX99Pq5wU1HkX9SYSJHpqOoPwgf3sX2p3LCWYnvYQoDMQa2dvKTbvnukmBzaC2a3eDICIIMQrQQcZ2oADsAijA5Zw8bP2f_CHfBcALehQyeYEVZlQA7bWebhrp82WWvDZCxZCUycdFAF0Obbc-HMYP-hDTc9yq1eL0oTN1p8uv1a5FnZVkwNS6TQLb7iOx82nFDXVOqdY-NNSXQCCaSvMsNvqlEzoNuOcM9tyRt_p9qDpLCI-s4w5aRcndKVLw90fmE0ptODviF7rQmuGwwGVX-ziFR3Rh6g94hZHKL80ibUfwY3e86Tzlb1UTRLzhY3BgeyLnMdBzhUkWdm_6Sy8NZJnYfFjqbv-6w_S5b3pQfsPOaNTygqToZsy5RUUbvV4iHD0nfOmnDCgHbenwwNfSNcolWspsl2fywCxpb44BedNSSQ_XFlqg0bX09aoFkLGXXQPFi7AhNCFNuhs2B5Sy570to5hKz4pCQrwLG1OPrWh7MG31r6nhYtgED9ECRAR1lmSfVEAe4qdqywO4AHt01dtgqlb4uAMS2cA0rgFGKyyarTq5dGHbZUYPT0Ka0tIlNU7Ghp0dSEruGz9TfXVIgoKb5zufGQ6XXj5qZSxHWG3NEsQ2mhgwvo0QXyHZrM7LYc-m61fHz0bIvqNMGUnA1ZTOXIwzX_nASN3n8YHxwTbDgZn0HkUi73Qo6lq3K16TuZYkGEF6BAP3CtD1EPv5dmecUkz2rJzPH4XV3dlMZpQiZH8J2Q3-DfftHw2N6B-AGJQeNKzLXSg8YjPa0ETVjU2bLewMKZ6Qddvmh5dxWECx4YsGJZWC36OP5xak9g-IQJtNR8KCWJGKxWIikbsvTq0mtAkhCpypWctUBPxHphwR-Afk1wZVjL-ratleP6EtMlnKjqkwT-6BbycwryLMMXOx2pmu-uXIVwOj-xVq7
@startuml Shm_recv
!pragma teoz true


title "Shared memory receiver behaviour"

participant "Shared memory receiver" as SR
entity "Semaphore coord" as SMCD
box "Coordination struct"
entity "Reader count var" as RDR
entity "locks_active" as LA
entity "locks_leaving" as LL
entity "Semaphore copy" as SMCP
end box
entity "Copy buff" as MCP

group create
  activate SR
  alt "Coordination semaphore doesn't exist"
    SR -> SMCD **: Create semaphore
  end
  {wait_beg_1} SR -> SMCD: wait
  |||
  SMCP<-]: Writer inits it with the required number
  SMCD <-]: Writer is ready
  {wait_end_1} SMCD --> SR: ok
  SR -> SMCD: reincrease
  note right: this way all readers access the memory,\nthey will fail on the copy sem
  {wait_end_1} <-> {wait_beg_1}: Writer sets up sharedmemory 
  |||
  SR -> SR: MMap coordination struct
  SR -> SMCP: Trylock copy semaphore
  alt fail
    SR <-- SMCP: Can't lock
    ?<-SR: Fail
  else success
    SR <-- SMCP: Success
    SR -> SR: MMap copy buffer
    SR -> SR: read_flag to true
    SR -> LL++: Lock leaving[1]
    return
    SR -> RDR: Signal reader ready
  end
  SR->SR: Close coordination semaphore file
  ?<-SR: Success
  deactivate SR
end












group ready
  ?->SR++: ready?
  alt finished flag set
    ?<--SR: False
  else has read current chunk
    SR->LA ++: lock next chunk (reading)
    note right: Blocks until next\nchunk is written
    return
    SR --> LL: Release previous leaving
    SR -> SR: Change active
    SR->SR: reset read flag
    SR->MCP ++: get chunk size
    return c_size
    ?<--SR: c_size > 0
  else Yet to read current and no finished flag
    ?<--SR: True
  end
  alt finished
    SR -> SR : Set finished flag
    note left: This is done before\nactually returning
    SR -> SR : Release lock
    deactivate
  end
end
















group buff size
  ?->SR++
  SR -> SR: get buff_size from coord
  return buff_size
end





group receive
  ?->SR++
  note right
  This is called after ready so I am already on the correct
  chunk and it has data to read
  end note
  alt read_flag_set or finished flag set
  ?<- SR: Fail
  
  end
  SR -> MCP ++: Read data in current chunk
  return vector
  SR -> SR: set read flag
  SR -> LL++: lock leaving
  return
  SR --> LA: release active
  
  return vector
end









group destructor
  ?->SR++: Destroy
  alt not finished
    alt read_flag set
      SR->LL: unlock
    else read_flag false
      SR -> LA: unlock
    end
  end
  SR -> RDR: Notify left
  SR->SR: Unmap memory
  SR->SR: Close files
  |||
  destroy SR
  |||
end
@enduml